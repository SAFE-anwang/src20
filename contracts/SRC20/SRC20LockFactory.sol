// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SRC20LockFactory {
    mapping(address => address) token2lock;
    mapping(address => address) lock2token;

    bytes constant internal lockByteCode = hex"608060405234801561001057600080fd5b50611e68806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80636a2ea384116100665780636a2ea3841461013c5780638558dcc11461014f578063879adc2f146101625780638c36377c14610175578063a6d26fce146101d857600080fd5b806310acf255146100a3578063248d7057146100cc57806333ead8ff146100ed5780634b86c225146101005780636909479014610113575b600080fd5b6100b66100b13660046119c7565b6101eb565b6040516100c39190611a57565b60405180910390f35b6100df6100da366004611a71565b6105fb565b6040519081526020016100c3565b6100b66100fb366004611a8c565b6106cf565b6100df61010e366004611abf565b6109ab565b6100df610121366004611a71565b6001600160a01b031660009081526001602052604090205490565b6100b661014a366004611a8c565b610b8b565b6100df61015d366004611b17565b610d96565b6100df610170366004611a71565b611191565b610188610183366004611be8565b61125d565b6040516100c39190815181526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080808301519082015260a0918201519181019190915260c00190565b6100b66101e6366004611a8c565b6112c4565b60606001600160a01b0387166102405760405162461bcd60e51b8152602060048201526015602482015274696e76616c696420746f6b656e206164647265737360581b60448201526064015b60405180910390fd5b600085116102815760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606401610237565b600084116102c15760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642074696d657360981b6044820152606401610237565b60006102cd8385611c17565b1161031a5760405162461bcd60e51b815260206004820181905260248201527f5f7370616365446179202b205f73746172744461792063616e277420626520306044820152606401610237565b6040513360248201523060448201526064810186905260009081906001600160a01b038a169060840160408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b179052516103789190611c54565b6000604051808303816000865af19150503d80600081146103b5576040519150601f19603f3d011682016040523d82523d6000602084013e6103ba565b606091505b5091509150816103e6576103cd81611590565b60405162461bcd60e51b81526004016102379190611c70565b60008667ffffffffffffffff81111561040157610401611b01565b60405190808252806020026020018201604052801561042a578160200160208202803683370190505b5090506000610439888a611cb9565b905060005b61044960018a611ccd565b8110156105205761047a8b838a610461856001611c17565b61046b9190611ce0565b610475908b611c17565b6115d1565b83828151811061048c5761048c611cf7565b60209081029190910101527f9e91fc08a6b9ad305ed9692fc37e5c77042b1828c424b7b406bedacaf76aa8988c8c848b6104c7866001611c17565b6104d19190611ce0565b6104db908c611c17565b8786815181106104ed576104ed611cf7565b6020026020010151604051610506959493929190611d0d565b60405180910390a18061051881611d3e565b91505061043e565b6105448b61052e8b8d611d57565b6105389085611c17565b8a610461856001611c17565b83828151811061055657610556611cf7565b60209081029190910101527f9e91fc08a6b9ad305ed9692fc37e5c77042b1828c424b7b406bedacaf76aa8988c8c61058e8c8e611d57565b6105989086611c17565b8b6105a4866001611c17565b6105ae9190611ce0565b6105b8908c611c17565b8786815181106105ca576105ca611cf7565b60200260200101516040516105e3959493929190611d0d565b60405180910390a150909a9950505050505050505050565b6001600160a01b038116600090815260016020908152604080832080548251818502810185019093528083528493849392919083018282801561065d57602002820191906000526020600020905b815481526020019060010190808311610649575b5050505050905060005b81518110156106c6576002600083838151811061068657610686611cf7565b602002602001015181526020019081526020016000206005015443106106b457826106b081611d3e565b9350505b806106be81611d3e565b915050610667565b50909392505050565b606060006106dc856105fb565b9050600081116106fe5760405162461bcd60e51b815260040161023790611d6b565b8084106107645760405162461bcd60e51b815260206004820152602e60248201527f696e76616c6964205f73746172742c206d75737420626520696e205b302c206160448201526d7661696c61626c6549444e756d2960901b6064820152608401610237565b600083118015610775575060648311155b6107915760405162461bcd60e51b815260040161023790611d9a565b60008167ffffffffffffffff8111156107ac576107ac611b01565b6040519080825280602002602001820160405280156107d5578160200160208202803683370190505b506001600160a01b0387166000908152600160209081526040808320805482518185028101850190935280835294955092938493919283018282801561083a57602002820191906000526020600020905b815481526020019060010190808311610826575b5050505050905060005b81518110156108da576002600083838151811061086357610863611cf7565b602002602001015181526020019081526020016000206005015443106108c85781818151811061089557610895611cf7565b60200260200101518484806108a990611d3e565b9550815181106108bb576108bb611cf7565b6020026020010181815250505b806108d281611d3e565b915050610844565b5085846108e7828a611c17565b106108f9576108f68886611ccd565b90505b60008167ffffffffffffffff81111561091457610914611b01565b60405190808252806020026020018201604052801561093d578160200160208202803683370190505b50905060005b8281101561099d57856109568b83611c17565b8151811061096657610966611cf7565b602002602001015182828151811061098057610980611cf7565b60209081029190910101528061099581611d3e565b915050610943565b509998505050505050505050565b60006001600160a01b0385166109fb5760405162461bcd60e51b8152602060048201526015602482015274696e76616c696420746f6b656e206164647265737360581b6044820152606401610237565b60008311610a3c5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606401610237565b60008211610a7f5760405162461bcd60e51b815260206004820152601060248201526f696e76616c6964206c6f636b2064617960801b6044820152606401610237565b6040513360248201523060448201526064810184905260009081906001600160a01b0388169060840160408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b17905251610add9190611c54565b6000604051808303816000865af19150503d8060008114610b1a576040519150601f19603f3d011682016040523d82523d6000602084013e610b1f565b606091505b509150915081610b32576103cd81611590565b6000610b3f8787876115d1565b90507f9e91fc08a6b9ad305ed9692fc37e5c77042b1828c424b7b406bedacaf76aa8988888888885604051610b78959493929190611d0d565b60405180910390a1979650505050505050565b60606000610bae856001600160a01b031660009081526001602052604090205490565b905060008111610bd05760405162461bcd60e51b815260040161023790611d6b565b808410610c325760405162461bcd60e51b815260206004820152602a60248201527f696e76616c6964205f73746172742c206d75737420626520696e205b302c20746044820152696f74616c49444e756d2960b01b6064820152608401610237565b600083118015610c43575060648311155b610c5f5760405162461bcd60e51b815260040161023790611d9a565b8281610c6b8287611c17565b10610c7d57610c7a8583611ccd565b90505b60008167ffffffffffffffff811115610c9857610c98611b01565b604051908082528060200260200182016040528015610cc1578160200160208202803683370190505b506001600160a01b038816600090815260016020908152604080832080548251818502810185019093528083529495509293909291830182828015610d2557602002820191906000526020600020905b815481526020019060010190808311610d11575b5050505050905060005b83811015610d895781610d428983611c17565b81518110610d5257610d52611cf7565b6020026020010151838281518110610d6c57610d6c611cf7565b602090810291909101015280610d8181611d3e565b915050610d2f565b5090979650505050505050565b60045460009060ff1615610de45760405162461bcd60e51b8152602060048201526015602482015274115c9c9bdc8e881c99595b9d1c985b9d0818d85b1b605a1b6044820152606401610237565b6004805460ff19166001179055815115801590610e035750601e825111155b610e595760405162461bcd60e51b815260206004820152602160248201527f696e76616c6964206964732073697a652c206d696e3a20312c206d61783a20336044820152600360fc1b6064820152608401610237565b6000610e63611971565b6000845167ffffffffffffffff811115610e7f57610e7f611b01565b604051908082528060200260200182016040528015610ea8578160200160208202803683370190505b5090506000805b8651811015610fec5760026000888381518110610ece57610ece611cf7565b6020908102919091018101518252818101929092526040908101600020815160c0810183528154815260018201546001600160a01b031693810193909352600281015491830182905260038101546060840152600481015460808401526005015460a08301529094501580610f50575060208401516001600160a01b03163214155b80610f5e57508360a0015143105b610fda576040840151610f719086611c17565b9450610f95878281518110610f8857610f88611cf7565b602002602001015161171d565b868181518110610fa757610fa7611cf7565b6020026020010151838380610fbb90611d3e565b945081518110610fcd57610fcd611cf7565b6020026020010181815250505b80610fe481611d3e565b915050610eaf565b50831561117d576040513260248201526044810185905260009081906001600160a01b038a169060640160408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b1790525161104b9190611c54565b6000604051808303816000865af19150503d8060008114611088576040519150601f19603f3d011682016040523d82523d6000602084013e61108d565b606091505b5091509150816110a0576103cd81611590565b60008367ffffffffffffffff8111156110bb576110bb611b01565b6040519080825280602002602001820160405280156110e4578160200160208202803683370190505b50905060005b8481101561113b5785818151811061110457611104611cf7565b602002602001015182828151811061111e5761111e611cf7565b60209081029190910101528061113381611d3e565b9150506110ea565b507fe4b7499d334dcb3a4338114f8df473bb4444d9cace993f8d2eb779921f074dd38a3289846040516111719493929190611dc6565b60405180910390a15050505b50506004805460ff19169055509392505050565b6001600160a01b03811660009081526001602090815260408083208054825181850281018501909352808352849384939291908301828280156111f357602002820191906000526020600020905b8154815260200190600101908083116111df575b5050505050905060005b81518110156106c6576002600083838151811061121c5761121c611cf7565b602002602001015181526020019081526020016000206005015443101561124b578261124781611d3e565b9350505b8061125581611d3e565b9150506111fd565b611265611971565b50600090815260026020818152604092839020835160c0810185528154815260018201546001600160a01b031692810192909252918201549281019290925260038101546060830152600481015460808301526005015460a082015290565b606060006112d185611191565b9050600081116112f35760405162461bcd60e51b815260040161023790611d6b565b8084106113565760405162461bcd60e51b815260206004820152602b60248201527f696e76616c6964205f73746172742c206d75737420626520696e205b302c206c60448201526a6f636b656449444e756d2960a81b6064820152608401610237565b600083118015611367575060648311155b6113835760405162461bcd60e51b815260040161023790611d9a565b60008167ffffffffffffffff81111561139e5761139e611b01565b6040519080825280602002602001820160405280156113c7578160200160208202803683370190505b506001600160a01b0387166000908152600160209081526040808320805482518185028101850190935280835294955092938493919283018282801561142c57602002820191906000526020600020905b815481526020019060010190808311611418575b5050505050905060005b81518110156114cd576002600083838151811061145557611455611cf7565b60200260200101518152602001908152602001600020600501544310156114bb5781818151811061148857611488611cf7565b602002602001015184848061149c90611d3e565b9550815181106114ae576114ae611cf7565b6020026020010181815250505b806114c581611d3e565b915050611436565b5085846114da828a611c17565b106114ec576114e98886611ccd565b90505b60008167ffffffffffffffff81111561150757611507611b01565b604051908082528060200260200182016040528015611530578160200160208202803683370190505b50905060005b8281101561099d57856115498b83611c17565b8151811061155957611559611cf7565b602002602001015182828151811061157357611573611cf7565b60209081029190910101528061158881611d3e565b915050611536565b8051606090156115a35781518083602001fd5b505060408051808201909152600d81526c3ab735b737bbb71032b93937b960991b602082015290565b919050565b6000816000036116165760405162461bcd60e51b815260206004820152601060248201526f696e76616c6964206c6f636b2064617960801b6044820152606401610237565b600061162061188e565b61162a9084611ce0565b6116349043611c17565b90506000806000815461164690611d3e565b91829055506001600160a01b0387811660008181526001602081815260408084208054808501825581865283862001889055815160c0810183528881528084018781528184018f8152606083018f8152436080850190815260a085018f81528d8b526002808a52978b20955186559351858a0180546001600160a01b03191691909d1617909b55905194830194909455925160038201559651600488015590516005909601959095559290915290819052905491925061170591611ccd565b60008281526003602052604090205595945050505050565b6000818152600260205260409020600101546001600160a01b0316321461177a5760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081c9958dbdc99081a59607a1b6044820152606401610237565b3260009081526001602081815260408084208585526003909252909220548254909183916117a89190611ccd565b815481106117b8576117b8611cf7565b90600052602060002001548282815481106117d5576117d5611cf7565b906000526020600020018190555080600360008484815481106117fa576117fa611cf7565b90600052602060002001548152602001908152602001600020819055508180548061182757611827611e03565b600082815260208082208301600019908101839055909201909255938152600280855260408083208381556001810180546001600160a01b031916905591820183905560038083018490556004830184905560059092018390559452928320929092555050565b60405160206024820152600b60448201526a626c6f636b5f737061636560a81b6064820152600090819081906110009060840160408051601f198184030181529181526020820180516001600160e01b03166304b01c2560e51b179052516118f69190611c54565b600060405180830381855afa9150503d8060008114611931576040519150601f19603f3d011682016040523d82523d6000602084013e611936565b606091505b509150915081611949576103cd81611590565b8080602001905181019061195d9190611e19565b61196a9062015180611cb9565b9250505090565b6040518060c001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b03811681146115cc57600080fd5b60008060008060008060c087890312156119e057600080fd5b6119e9876119b0565b95506119f7602088016119b0565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600081518084526020808501945080840160005b83811015611a4c57815187529582019590820190600101611a30565b509495945050505050565b602081526000611a6a6020830184611a1c565b9392505050565b600060208284031215611a8357600080fd5b611a6a826119b0565b600080600060608486031215611aa157600080fd5b611aaa846119b0565b95602085013595506040909401359392505050565b60008060008060808587031215611ad557600080fd5b611ade856119b0565b9350611aec602086016119b0565b93969395505050506040820135916060013590565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611b2a57600080fd5b611b33836119b0565b915060208084013567ffffffffffffffff80821115611b5157600080fd5b818601915086601f830112611b6557600080fd5b813581811115611b7757611b77611b01565b8060051b604051601f19603f83011681018181108582111715611b9c57611b9c611b01565b604052918252848201925083810185019189831115611bba57600080fd5b938501935b82851015611bd857843584529385019392850192611bbf565b8096505050505050509250929050565b600060208284031215611bfa57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611c2a57611c2a611c01565b92915050565b60005b83811015611c4b578181015183820152602001611c33565b50506000910152565b60008251611c66818460208701611c30565b9190910192915050565b6020815260008251806020840152611c8f816040850160208701611c30565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601260045260246000fd5b600082611cc857611cc8611ca3565b500490565b81810381811115611c2a57611c2a611c01565b8082028115828204841417611c2a57611c2a611c01565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b600060018201611d5057611d50611c01565b5060010190565b600082611d6657611d66611ca3565b500690565b602080825260159082015274696e73756666696369656e74207175616e7469747960581b604082015260600190565b6020808252601290820152716d61782072657475726e203130302069647360701b604082015260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611df990830184611a1c565b9695505050505050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215611e2b57600080fd5b505191905056fea2646970667358221220c52b5fc729e13a751511533ab37ae9bf3d47cefd91360f4cd65453cc63a98f3b64736f6c63430008110033";

    function lock(address _token, address _to, uint256 _amount, uint256 _lockDay) public returns (uint256) {
        bool success;
        bytes memory data;
        (success, data) = _token.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", msg.sender, address(this), _amount));
        if(!success) revert(getRevertMessage(data));

        address lockAddr = _getLock(_token);
        (success, data) = _token.call(abi.encodeWithSignature("approve(address,uint256)", lockAddr, _amount));
        if(!success) revert(getRevertMessage(data));

        (success, data) = lockAddr.call(abi.encodeWithSignature("lock(address,address,uint256,uint256)", _token, _to, _amount, _lockDay));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function batchLock(address _token, address _to, uint256 _amount, uint256 _times, uint256 _spaceDay, uint256 _startDay) public returns (uint256[] memory) {
        bool success;
        bytes memory data;
        (success, data) = _token.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", msg.sender, address(this), _amount));
        if(!success) revert(getRevertMessage(data));

        address lockAddr = _getLock(_token);
        (success, data) = _token.call(abi.encodeWithSignature("approve(address,uint256)", lockAddr, _amount));
        if(!success) revert(getRevertMessage(data));

        (success, data) = _getLock(_token).call(abi.encodeWithSignature("batchLock(address,address,uint256,uint256,uint256,uint256)", _token, _to, _amount, _times, _spaceDay, _startDay));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function withdrawByID(address _token, uint256[] memory _ids) public returns (uint256) {
        (bool success, bytes memory data) = _getLock(_token).call(abi.encodeWithSignature("withdrawByID(address,uint256[])", _token, _ids));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getTotalIDNum(address _token, address _addr) public view returns (uint256) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getTotalIDNum(address)", _addr));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getTotalIDs(address _token, address _addr, uint256 _start, uint256 _count) public view returns (uint256[] memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getTotalIDs(address,uint256,uint256)", _addr, _start, _count));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function getAvailableIDNum(address _token, address _addr) public view returns (uint256) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getAvailableIDNum(address)", _addr));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getAvailableIDs(address _token, address _addr, uint256 _start, uint256 _count) public view returns (uint256[] memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getAvailableIDs(address,uint256,uint256)", _addr, _start, _count));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function getLockedIDNum(address _token, address _addr) public view returns (uint256) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getLockedIDNum(address)", _addr));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getLockedIDs(address _token, address _addr, uint256 _start, uint256 _count) public view returns (uint256[] memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getLockedIDs(address,uint256,uint256)", _addr, _start, _count));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function getRecordByID(address _token, uint256 _id) public view returns (LockRecord memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getRecordByID(uint256)", _id));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (LockRecord));
    }

    function getLock(address _token) public view returns (address) {
        return token2lock[_token];
    }

    function getToken(address _lock) public view returns (address) {
        return lock2token[_lock];
    }

    function _getLock(address _token) internal returns (address) {
        if(token2lock[_token] == address(0)) {
            address lockAddr;
            bytes memory code = lockByteCode;
            assembly {
                lockAddr := create(0, add(code, 0x20), mload(code))
            }
            require(lockAddr != address(0), "deploy token-lock-contract failed");
            token2lock[_token] = lockAddr;
            lock2token[lockAddr] = _token;
        }
        return token2lock[_token];
    }

    function getRevertMessage(bytes memory _data) internal pure returns (string memory) {
        if (_data.length > 0) {
            assembly {
                let size := mload(_data)
                revert(add(32, _data), size)
            }
        } else {
            return "unknown error";
        }
    }

    struct LockRecord {
        uint256 id;
        address addr;
        uint256 amount;
        uint256 lockDay;
        uint256 startHeight;
        uint256 unlockHeight;
    }
}