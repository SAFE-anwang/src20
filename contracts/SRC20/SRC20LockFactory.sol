// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SRC20LockFactory {
    mapping(address => address) token2lock;
    mapping(address => address) lock2token;

    bytes constant internal lockByteCode = hex"";

    function lock(address _token, address _to, uint256 _amount, uint256 _lockDay) public returns (uint256) {
        bool success;
        bytes memory data;
        (success, data) = _token.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", msg.sender, address(this), _amount));
        if(!success) revert(getRevertMessage(data));

        address lockAddr = _getLock(_token);
        (success, data) = _token.call(abi.encodeWithSignature("approve(address,uint256)", lockAddr, _amount));
        if(!success) revert(getRevertMessage(data));

        (success, data) = lockAddr.call(abi.encodeWithSignature("lock(address,address,uint256,uint256)", _token, _to, _amount, _lockDay));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function batchLock(address _token, address _to, uint256 _amount, uint256 _times, uint256 _spaceDay, uint256 _startDay) public returns (uint256[] memory) {
        bool success;
        bytes memory data;
        (success, data) = _token.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", msg.sender, address(this), _amount));
        if(!success) revert(getRevertMessage(data));

        address lockAddr = _getLock(_token);
        (success, data) = _token.call(abi.encodeWithSignature("approve(address,uint256)", lockAddr, _amount));
        if(!success) revert(getRevertMessage(data));

        (success, data) = _getLock(_token).call(abi.encodeWithSignature("batchLock(address,address,uint256,uint256,uint256,uint256)", _token, _to, _amount, _times, _spaceDay, _startDay));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function withdrawByID(address _token, uint256[] memory _ids) public returns (uint256) {
        (bool success, bytes memory data) = _getLock(_token).call(abi.encodeWithSignature("withdrawByID(address,uint256[])", _token, _ids));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getTotalIDNum(address _token, address _addr) public view returns (uint256) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getTotalIDNum(address)", _addr));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getTotalIDs(address _token, address _addr, uint256 _start, uint256 _count) public view returns (uint256[] memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getTotalIDs(address,uint256,uint256)", _addr, _start, _count));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function getAvailableIDNum(address _token, address _addr) public view returns (uint256) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getAvailableIDNum(address)", _addr));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getAvailableIDs(address _token, address _addr, uint256 _start, uint256 _count) public view returns (uint256[] memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getAvailableIDs(address,uint256,uint256)", _addr, _start, _count));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function getLockedIDNum(address _token, address _addr) public view returns (uint256) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getLockedIDNum(address)", _addr));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getLockedIDs(address _token, address _addr, uint256 _start, uint256 _count) public view returns (uint256[] memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getLockedIDs(address,uint256,uint256)", _addr, _start, _count));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function getRecordByID(address _token, uint256 _id) public view returns (LockRecord memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getRecordByID(uint256)", _id));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (LockRecord));
    }

    function getLock(address _token) public view returns (address) {
        return token2lock[_token];
    }

    function getToken(address _lock) public view returns (address) {
        return lock2token[_lock];
    }

    function _getLock(address _token) internal returns (address) {
        if(token2lock[_token] == address(0)) {
            address lockAddr;
            bytes memory code = lockByteCode;
            assembly {
                lockAddr := create(0, add(code, 0x20), mload(code))
            }
            require(lockAddr != address(0), "deploy token-lock-contract failed");
            token2lock[_token] = lockAddr;
            lock2token[lockAddr] = _token;
        }
        return token2lock[_token];
    }

    function getRevertMessage(bytes memory _data) internal pure returns (string memory) {
        if (_data.length > 0) {
            assembly {
                let size := mload(_data)
                revert(add(32, _data), size)
            }
        } else {
            return "unknown error";
        }
    }

    struct LockRecord {
        uint256 id;
        address addr;
        uint256 amount;
        uint256 lockDay;
        uint256 startHeight;
        uint256 unlockHeight;
    }
}