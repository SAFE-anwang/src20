// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SRC20LockFactory {
    mapping(address => address) token2lock;
    mapping(address => address) lock2token;

    bytes constant internal lockByteCode = hex"608060405234801561001057600080fd5b50604051611fc6380380611fc683398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611f33806100936000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063879adc2f11610071578063879adc2f1461014b5780638c36377c1461015e57806399c516f0146101c1578063a6d26fce146101d4578063c28423ec146101e7578063e2ab691d146101fa57600080fd5b806321df0da7146100ae578063248d7057146100ce57806333ead8ff146100ef578063690947901461010f5780636a2ea38414610138575b600080fd5b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100e16100dc366004611acb565b61020d565b6040519081526020016100c5565b6101026100fd366004611aed565b6102e1565b6040516100c59190611b5b565b6100e161011d366004611acb565b6001600160a01b031660009081526002602052604090205490565b610102610146366004611aed565b6105c6565b6100e1610159366004611acb565b6107d1565b61017161016c366004611b6e565b61089d565b6040516100c59190815181526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080808301519082015260a0918201519181019190915260c00190565b6101026101cf366004611b87565b610906565b6101026101e2366004611aed565b610d5c565b6100e16101f5366004611bdf565b611028565b6100e1610208366004611aed565b611459565b6001600160a01b038116600090815260026020908152604080832080548251818502810185019093528083528493849392919083018282801561026f57602002820191906000526020600020905b81548152602001906001019080831161025b575b5050505050905060005b81518110156102d8576003600083838151811061029857610298611c9d565b602002602001015181526020019081526020016000206005015443106102c657826102c281611cc9565b9350505b806102d081611cc9565b915050610279565b50909392505050565b606060006102ee8561020d565b9050600081116103195760405162461bcd60e51b815260040161031090611ce2565b60405180910390fd5b80841061037f5760405162461bcd60e51b815260206004820152602e60248201527f696e76616c6964205f73746172742c206d75737420626520696e205b302c206160448201526d7661696c61626c6549444e756d2960901b6064820152608401610310565b600083118015610390575060648311155b6103ac5760405162461bcd60e51b815260040161031090611d11565b60008167ffffffffffffffff8111156103c7576103c7611bc9565b6040519080825280602002602001820160405280156103f0578160200160208202803683370190505b506001600160a01b0387166000908152600260209081526040808320805482518185028101850190935280835294955092938493919283018282801561045557602002820191906000526020600020905b815481526020019060010190808311610441575b5050505050905060005b81518110156104f5576003600083838151811061047e5761047e611c9d565b602002602001015181526020019081526020016000206005015443106104e3578181815181106104b0576104b0611c9d565b60200260200101518484806104c490611cc9565b9550815181106104d6576104d6611c9d565b6020026020010181815250505b806104ed81611cc9565b91505061045f565b508584610502828a611d3d565b10610514576105118886611d56565b90505b60008167ffffffffffffffff81111561052f5761052f611bc9565b604051908082528060200260200182016040528015610558578160200160208202803683370190505b50905060005b828110156105b857856105718b83611d3d565b8151811061058157610581611c9d565b602002602001015182828151811061059b5761059b611c9d565b6020908102919091010152806105b081611cc9565b91505061055e565b509998505050505050505050565b606060006105e9856001600160a01b031660009081526002602052604090205490565b90506000811161060b5760405162461bcd60e51b815260040161031090611ce2565b80841061066d5760405162461bcd60e51b815260206004820152602a60248201527f696e76616c6964205f73746172742c206d75737420626520696e205b302c20746044820152696f74616c49444e756d2960b01b6064820152608401610310565b60008311801561067e575060648311155b61069a5760405162461bcd60e51b815260040161031090611d11565b82816106a68287611d3d565b106106b8576106b58583611d56565b90505b60008167ffffffffffffffff8111156106d3576106d3611bc9565b6040519080825280602002602001820160405280156106fc578160200160208202803683370190505b506001600160a01b03881660009081526002602090815260408083208054825181850281018501909352808352949550929390929183018282801561076057602002820191906000526020600020905b81548152602001906001019080831161074c575b5050505050905060005b838110156107c4578161077d8983611d3d565b8151811061078d5761078d611c9d565b60200260200101518382815181106107a7576107a7611c9d565b6020908102919091010152806107bc81611cc9565b91505061076a565b5090979650505050505050565b6001600160a01b038116600090815260026020908152604080832080548251818502810185019093528083528493849392919083018282801561083357602002820191906000526020600020905b81548152602001906001019080831161081f575b5050505050905060005b81518110156102d8576003600083838151811061085c5761085c611c9d565b602002602001015181526020019081526020016000206005015443101561088b578261088781611cc9565b9350505b8061089581611cc9565b91505061083d565b6108a5611a75565b50600090815260036020818152604092839020835160c0810185528154815260018201546001600160a01b0316928101929092526002810154938201939093529082015460608201526004820154608082015260059091015460a082015290565b6000546060906001600160a01b03166109315760405162461bcd60e51b815260040161031090611d69565b600085116109725760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606401610310565b600084116109b25760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642074696d657360981b6044820152606401610310565b60006109be8587611dae565b11610a0b5760405162461bcd60e51b815260206004820152601f60248201527f616d6f756e742f74696d6573206d75737420626967676572207468616e2030006044820152606401610310565b6000610a178385611d3d565b11610a645760405162461bcd60e51b815260206004820181905260248201527f5f7370616365446179202b205f73746172744461792063616e277420626520306044820152606401610310565b600080546040513360248201523060448201526064810188905282916001600160a01b03169060840160408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b17905251610ac29190611de6565b6000604051808303816000865af19150503d8060008114610aff576040519150601f19603f3d011682016040523d82523d6000602084013e610b04565b606091505b509150915081610b3057610b178161161e565b60405162461bcd60e51b81526004016103109190611e02565b60008667ffffffffffffffff811115610b4b57610b4b611bc9565b604051908082528060200260200182016040528015610b74578160200160208202803683370190505b5090506000610b83888a611dae565b905060005b610b9360018a611d56565b811015610c7657610bc48b838a610bab856001611d3d565b610bb59190611e35565b610bbf908b611d3d565b61165f565b838281518110610bd657610bd6611c9d565b60209081029190910101526000547f9e91fc08a6b9ad305ed9692fc37e5c77042b1828c424b7b406bedacaf76aa898906001600160a01b03168c848b610c1d866001611d3d565b610c279190611e35565b610c31908c611d3d565b878681518110610c4357610c43611c9d565b6020026020010151604051610c5c959493929190611e4c565b60405180910390a180610c6e81611cc9565b915050610b88565b610c9a8b610c848b8d611e7d565b610c8e9085611d3d565b8a610bab856001611d3d565b838281518110610cac57610cac611c9d565b60209081029190910101526000547f9e91fc08a6b9ad305ed9692fc37e5c77042b1828c424b7b406bedacaf76aa898906001600160a01b03168c610cf08c8e611e7d565b610cfa9086611d3d565b8b610d06866001611d3d565b610d109190611e35565b610d1a908c611d3d565b878681518110610d2c57610d2c611c9d565b6020026020010151604051610d45959493929190611e4c565b60405180910390a150909998505050505050505050565b60606000610d69856107d1565b905060008111610d8b5760405162461bcd60e51b815260040161031090611ce2565b808410610dee5760405162461bcd60e51b815260206004820152602b60248201527f696e76616c6964205f73746172742c206d75737420626520696e205b302c206c60448201526a6f636b656449444e756d2960a81b6064820152608401610310565b600083118015610dff575060648311155b610e1b5760405162461bcd60e51b815260040161031090611d11565b60008167ffffffffffffffff811115610e3657610e36611bc9565b604051908082528060200260200182016040528015610e5f578160200160208202803683370190505b506001600160a01b03871660009081526002602090815260408083208054825181850281018501909352808352949550929384939192830182828015610ec457602002820191906000526020600020905b815481526020019060010190808311610eb0575b5050505050905060005b8151811015610f655760036000838381518110610eed57610eed611c9d565b6020026020010151815260200190815260200160002060050154431015610f5357818181518110610f2057610f20611c9d565b6020026020010151848480610f3490611cc9565b955081518110610f4657610f46611c9d565b6020026020010181815250505b80610f5d81611cc9565b915050610ece565b508584610f72828a611d3d565b10610f8457610f818886611d56565b90505b60008167ffffffffffffffff811115610f9f57610f9f611bc9565b604051908082528060200260200182016040528015610fc8578160200160208202803683370190505b50905060005b828110156105b85785610fe18b83611d3d565b81518110610ff157610ff1611c9d565b602002602001015182828151811061100b5761100b611c9d565b60209081029190910101528061102081611cc9565b915050610fce565b60055460009060ff16156110765760405162461bcd60e51b8152602060048201526015602482015274115c9c9bdc8e881c99595b9d1c985b9d0818d85b1b605a1b6044820152606401610310565b6005805460ff191660011790556000546001600160a01b03166110ab5760405162461bcd60e51b815260040161031090611d69565b600082511180156110be5750601e825111155b6111145760405162461bcd60e51b815260206004820152602160248201527f696e76616c6964206964732073697a652c206d696e3a20312c206d61783a20336044820152600360fc1b6064820152608401610310565b600061111e611a75565b6000845167ffffffffffffffff81111561113a5761113a611bc9565b604051908082528060200260200182016040528015611163578160200160208202803683370190505b5090506000805b86518110156112a7576003600088838151811061118957611189611c9d565b6020908102919091018101518252818101929092526040908101600020815160c0810183528154815260018201546001600160a01b031693810193909352600281015491830182905260038101546060840152600481015460808401526005015460a0830152909450158061120b575060208401516001600160a01b03163214155b8061121957508360a0015143105b61129557604084015161122c9086611d3d565b945061125087828151811061124357611243611c9d565b6020026020010151611821565b86818151811061126257611262611c9d565b602002602001015183838061127690611cc9565b94508151811061128857611288611c9d565b6020026020010181815250505b8061129f81611cc9565b91505061116a565b50831561144657600080546040513260248201526044810187905282916001600160a01b03169060640160408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b179052516113069190611de6565b6000604051808303816000865af19150503d8060008114611343576040519150601f19603f3d011682016040523d82523d6000602084013e611348565b606091505b50915091508161135b57610b178161161e565b60008367ffffffffffffffff81111561137657611376611bc9565b60405190808252806020026020018201604052801561139f578160200160208202803683370190505b50905060005b848110156113f6578581815181106113bf576113bf611c9d565b60200260200101518282815181106113d9576113d9611c9d565b6020908102919091010152806113ee81611cc9565b9150506113a5565b506000546040517fe4b7499d334dcb3a4338114f8df473bb4444d9cace993f8d2eb779921f074dd39161143a916001600160a01b039091169032908b908690611e91565b60405180910390a15050505b50506005805460ff191690555092915050565b600080546001600160a01b03166114825760405162461bcd60e51b815260040161031090611d69565b600083116114c35760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606401610310565b600082116115065760405162461bcd60e51b815260206004820152601060248201526f696e76616c6964206c6f636b2064617960801b6044820152606401610310565b600080546040513360248201523060448201526064810186905282916001600160a01b03169060840160408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b179052516115649190611de6565b6000604051808303816000865af19150503d80600081146115a1576040519150601f19603f3d011682016040523d82523d6000602084013e6115a6565b606091505b5091509150816115b957610b178161161e565b60006115c687878761165f565b6000546040519192507f9e91fc08a6b9ad305ed9692fc37e5c77042b1828c424b7b406bedacaf76aa8989161160c916001600160a01b0316908a908a908a908790611e4c565b60405180910390a19695505050505050565b8051606090156116315781518083602001fd5b505060408051808201909152600d81526c3ab735b737bbb71032b93937b960991b602082015290565b919050565b6000816000036116a45760405162461bcd60e51b815260206004820152601060248201526f696e76616c6964206c6f636b2064617960801b6044820152606401610310565b60006116ae611992565b6116b89084611e35565b6116c29043611d3d565b905060006001600081546116d590611cc9565b919050819055905060026000876001600160a01b03166001600160a01b031681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150556040518060c00160405280828152602001876001600160a01b0316815260200186815260200185815260200143815260200183815250600360008381526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301556080820151816004015560a08201518160050155905050600160026000886001600160a01b03166001600160a01b03168152602001908152602001600020805490506118099190611d56565b60008281526004602052604090205595945050505050565b6000818152600360205260409020600101546001600160a01b0316321461187e5760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081c9958dbdc99081a59607a1b6044820152606401610310565b326000908152600260209081526040808320848452600490925290912054815482906118ac90600190611d56565b815481106118bc576118bc611c9d565b90600052602060002001548282815481106118d9576118d9611c9d565b906000526020600020018190555080600460008484815481106118fe576118fe611c9d565b90600052602060002001548152602001908152602001600020819055508180548061192b5761192b611ece565b600082815260208082208301600019908101839055909201909255938152600380855260408083208381556001810180546001600160a01b031916905560028101849055918201839055600480830184905560059092018390559452928320929092555050565b60405160206024820152600b60448201526a626c6f636b5f737061636560a81b6064820152600090819081906110009060840160408051601f198184030181529181526020820180516001600160e01b03166304b01c2560e51b179052516119fa9190611de6565b600060405180830381855afa9150503d8060008114611a35576040519150601f19603f3d011682016040523d82523d6000602084013e611a3a565b606091505b509150915081611a4d57610b178161161e565b80806020019051810190611a619190611ee4565b611a6e9062015180611dae565b9250505090565b6040518060c001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461165a57600080fd5b600060208284031215611add57600080fd5b611ae682611ab4565b9392505050565b600080600060608486031215611b0257600080fd5b611b0b84611ab4565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b83811015611b5057815187529582019590820190600101611b34565b509495945050505050565b602081526000611ae66020830184611b20565b600060208284031215611b8057600080fd5b5035919050565b600080600080600060a08688031215611b9f57600080fd5b611ba886611ab4565b97602087013597506040870135966060810135965060800135945092505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215611bf257600080fd5b823567ffffffffffffffff80821115611c0a57600080fd5b818501915085601f830112611c1e57600080fd5b813581811115611c3057611c30611bc9565b8060051b604051601f19603f83011681018181108582111715611c5557611c55611bc9565b604052918252848201925083810185019188831115611c7357600080fd5b938501935b82851015611c9157843584529385019392850192611c78565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611cdb57611cdb611cb3565b5060010190565b602080825260159082015274696e73756666696369656e74207175616e7469747960581b604082015260600190565b6020808252601290820152716d61782072657475726e203130302069647360701b604082015260600190565b80820180821115611d5057611d50611cb3565b92915050565b81810381811115611d5057611d50611cb3565b602080825260159082015274696e76616c696420746f6b656e206164647265737360581b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b600082611dbd57611dbd611d98565b500490565b60005b83811015611ddd578181015183820152602001611dc5565b50506000910152565b60008251611df8818460208701611dc2565b9190910192915050565b6020815260008251806020840152611e21816040850160208701611dc2565b601f01601f19169190910160400192915050565b8082028115828204841417611d5057611d50611cb3565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b600082611e8c57611e8c611d98565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611ec490830184611b20565b9695505050505050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215611ef657600080fd5b505191905056fea26469706673582212200bec4ec3b85e2746e51dd4d01d07243d7a62ebfe341a0e2f5dea10db9b37809964736f6c63430008110033";

    function lock(address _token, address _to, uint256 _amount, uint256 _lockDay) public returns (uint256) {
        bool success;
        bytes memory data;
        (success, data) = _token.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", msg.sender, address(this), _amount));
        if(!success) revert(getRevertMessage(data));

        address lockAddr = _getLock(_token);
        (success, data) = _token.call(abi.encodeWithSignature("approve(address,uint256)", lockAddr, _amount));
        if(!success) revert(getRevertMessage(data));

        (success, data) = lockAddr.call(abi.encodeWithSignature("lock(address,uint256,uint256)", _to, _amount, _lockDay));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function batchLock(address _token, address _to, uint256 _amount, uint256 _times, uint256 _spaceDay, uint256 _startDay) public returns (uint256[] memory) {
        bool success;
        bytes memory data;
        (success, data) = _token.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", msg.sender, address(this), _amount));
        if(!success) revert(getRevertMessage(data));

        address lockAddr = _getLock(_token);
        (success, data) = _token.call(abi.encodeWithSignature("approve(address,uint256)", lockAddr, _amount));
        if(!success) revert(getRevertMessage(data));

        (success, data) = lockAddr.call(abi.encodeWithSignature("batchLock(address,uint256,uint256,uint256,uint256)", _to, _amount, _times, _spaceDay, _startDay));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function withdrawByID(address _token, uint256[] memory _ids) public returns (uint256) {
        (bool success, bytes memory data) = _getLock(_token).call(abi.encodeWithSignature("withdrawByID(uint256[])", _ids));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getTotalIDNum(address _token, address _addr) public view returns (uint256) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getTotalIDNum(address)", _addr));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getTotalIDs(address _token, address _addr, uint256 _start, uint256 _count) public view returns (uint256[] memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getTotalIDs(address,uint256,uint256)", _addr, _start, _count));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function getAvailableIDNum(address _token, address _addr) public view returns (uint256) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getAvailableIDNum(address)", _addr));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getAvailableIDs(address _token, address _addr, uint256 _start, uint256 _count) public view returns (uint256[] memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getAvailableIDs(address,uint256,uint256)", _addr, _start, _count));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function getLockedIDNum(address _token, address _addr) public view returns (uint256) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getLockedIDNum(address)", _addr));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getLockedIDs(address _token, address _addr, uint256 _start, uint256 _count) public view returns (uint256[] memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getLockedIDs(address,uint256,uint256)", _addr, _start, _count));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function getRecordByID(address _token, uint256 _id) public view returns (LockRecord memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getRecordByID(uint256)", _id));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (LockRecord));
    }

    function getLock(address _token) public view returns (address) {
        return token2lock[_token];
    }

    function getToken(address _lock) public view returns (address) {
        return lock2token[_lock];
    }

    function _getLock(address _token) internal returns (address) {
        if(token2lock[_token] == address(0)) {
            address lockAddr;
            bytes memory code = abi.encodePacked(lockByteCode, abi.encode(_token));
            assembly {
                lockAddr := create(0, add(code, 0x20), mload(code))
            }
            require(lockAddr != address(0), "deploy token-lock-contract failed");
            token2lock[_token] = lockAddr;
            lock2token[lockAddr] = _token;
        }
        return token2lock[_token];
    }

    function getRevertMessage(bytes memory _data) internal pure returns (string memory) {
        if (_data.length > 0) {
            assembly {
                let size := mload(_data)
                revert(add(32, _data), size)
            }
        } else {
            return "unknown error";
        }
    }

    struct LockRecord {
        uint256 id;
        address addr;
        uint256 amount;
        uint256 lockDay;
        uint256 startHeight;
        uint256 unlockHeight;
    }
}