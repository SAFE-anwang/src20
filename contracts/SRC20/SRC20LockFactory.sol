// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SRC20LockFactory {
    mapping(address => address) token2lock;
    mapping(address => address) lock2token;

    bytes constant internal lockByteCode = hex"608060405234801561001057600080fd5b5060405161201138038061201183398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611f7e806100936000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063690947901161007157806369094790146101395780636a2ea384146101625780638558dcc114610175578063879adc2f146101885780638c36377c1461019b578063a6d26fce146101fe57600080fd5b806310acf255146100ae57806321df0da7146100d7578063248d7057146100f257806333ead8ff146101135780634b86c22514610126575b600080fd5b6100c16100bc366004611aae565b610211565b6040516100ce9190611b3e565b60405180910390f35b6000546040516001600160a01b0390911681526020016100ce565b610105610100366004611b58565b61065e565b6040519081526020016100ce565b6100c1610121366004611b73565b610732565b610105610134366004611ba6565b610a0e565b610105610147366004611b58565b6001600160a01b031660009081526002602052604090205490565b6100c1610170366004611b73565b610bcc565b610105610183366004611bfe565b610dd7565b610105610196366004611b58565b611200565b6101ae6101a9366004611ccf565b6112cc565b6040516100ce9190815181526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080808301519082015260a0918201519181019190915260c00190565b6100c161020c366004611b73565b611335565b6000546060906001600160a01b0388811691161461024a5760405162461bcd60e51b815260040161024190611ce8565b60405180910390fd5b6000851161028b5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606401610241565b600084116102cb5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642074696d657360981b6044820152606401610241565b60006102d78587611d43565b116103245760405162461bcd60e51b815260206004820152601f60248201527f616d6f756e742f74696d6573206d75737420626967676572207468616e2030006044820152606401610241565b60006103308385611d57565b1161037d5760405162461bcd60e51b815260206004820181905260248201527f5f7370616365446179202b205f73746172744461792063616e277420626520306044820152606401610241565b6040513360248201523060448201526064810186905260009081906001600160a01b038a169060840160408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b179052516103db9190611d94565b6000604051808303816000865af19150503d8060008114610418576040519150601f19603f3d011682016040523d82523d6000602084013e61041d565b606091505b5091509150816104495761043081611601565b60405162461bcd60e51b81526004016102419190611db0565b60008667ffffffffffffffff81111561046457610464611be8565b60405190808252806020026020018201604052801561048d578160200160208202803683370190505b509050600061049c888a611d43565b905060005b6104ac60018a611de3565b811015610583576104dd8b838a6104c4856001611d57565b6104ce9190611df6565b6104d8908b611d57565b611642565b8382815181106104ef576104ef611e0d565b60209081029190910101527f9e91fc08a6b9ad305ed9692fc37e5c77042b1828c424b7b406bedacaf76aa8988c8c848b61052a866001611d57565b6105349190611df6565b61053e908c611d57565b87868151811061055057610550611e0d565b6020026020010151604051610569959493929190611e23565b60405180910390a18061057b81611e54565b9150506104a1565b6105a78b6105918b8d611e6d565b61059b9085611d57565b8a6104c4856001611d57565b8382815181106105b9576105b9611e0d565b60209081029190910101527f9e91fc08a6b9ad305ed9692fc37e5c77042b1828c424b7b406bedacaf76aa8988c8c6105f18c8e611e6d565b6105fb9086611d57565b8b610607866001611d57565b6106119190611df6565b61061b908c611d57565b87868151811061062d5761062d611e0d565b6020026020010151604051610646959493929190611e23565b60405180910390a150909a9950505050505050505050565b6001600160a01b03811660009081526002602090815260408083208054825181850281018501909352808352849384939291908301828280156106c057602002820191906000526020600020905b8154815260200190600101908083116106ac575b5050505050905060005b815181101561072957600360008383815181106106e9576106e9611e0d565b60200260200101518152602001908152602001600020600501544310610717578261071381611e54565b9350505b8061072181611e54565b9150506106ca565b50909392505050565b6060600061073f8561065e565b9050600081116107615760405162461bcd60e51b815260040161024190611e81565b8084106107c75760405162461bcd60e51b815260206004820152602e60248201527f696e76616c6964205f73746172742c206d75737420626520696e205b302c206160448201526d7661696c61626c6549444e756d2960901b6064820152608401610241565b6000831180156107d8575060648311155b6107f45760405162461bcd60e51b815260040161024190611eb0565b60008167ffffffffffffffff81111561080f5761080f611be8565b604051908082528060200260200182016040528015610838578160200160208202803683370190505b506001600160a01b0387166000908152600260209081526040808320805482518185028101850190935280835294955092938493919283018282801561089d57602002820191906000526020600020905b815481526020019060010190808311610889575b5050505050905060005b815181101561093d57600360008383815181106108c6576108c6611e0d565b6020026020010151815260200190815260200160002060050154431061092b578181815181106108f8576108f8611e0d565b602002602001015184848061090c90611e54565b95508151811061091e5761091e611e0d565b6020026020010181815250505b8061093581611e54565b9150506108a7565b50858461094a828a611d57565b1061095c576109598886611de3565b90505b60008167ffffffffffffffff81111561097757610977611be8565b6040519080825280602002602001820160405280156109a0578160200160208202803683370190505b50905060005b82811015610a0057856109b98b83611d57565b815181106109c9576109c9611e0d565b60200260200101518282815181106109e3576109e3611e0d565b6020908102919091010152806109f881611e54565b9150506109a6565b509998505050505050505050565b600080546001600160a01b03868116911614610a3c5760405162461bcd60e51b815260040161024190611ce8565b60008311610a7d5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606401610241565b60008211610ac05760405162461bcd60e51b815260206004820152601060248201526f696e76616c6964206c6f636b2064617960801b6044820152606401610241565b6040513360248201523060448201526064810184905260009081906001600160a01b0388169060840160408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b17905251610b1e9190611d94565b6000604051808303816000865af19150503d8060008114610b5b576040519150601f19603f3d011682016040523d82523d6000602084013e610b60565b606091505b509150915081610b735761043081611601565b6000610b80878787611642565b90507f9e91fc08a6b9ad305ed9692fc37e5c77042b1828c424b7b406bedacaf76aa8988888888885604051610bb9959493929190611e23565b60405180910390a1979650505050505050565b60606000610bef856001600160a01b031660009081526002602052604090205490565b905060008111610c115760405162461bcd60e51b815260040161024190611e81565b808410610c735760405162461bcd60e51b815260206004820152602a60248201527f696e76616c6964205f73746172742c206d75737420626520696e205b302c20746044820152696f74616c49444e756d2960b01b6064820152608401610241565b600083118015610c84575060648311155b610ca05760405162461bcd60e51b815260040161024190611eb0565b8281610cac8287611d57565b10610cbe57610cbb8583611de3565b90505b60008167ffffffffffffffff811115610cd957610cd9611be8565b604051908082528060200260200182016040528015610d02578160200160208202803683370190505b506001600160a01b038816600090815260026020908152604080832080548251818502810185019093528083529495509293909291830182828015610d6657602002820191906000526020600020905b815481526020019060010190808311610d52575b5050505050905060005b83811015610dca5781610d838983611d57565b81518110610d9357610d93611e0d565b6020026020010151838281518110610dad57610dad611e0d565b602090810291909101015280610dc281611e54565b915050610d70565b5090979650505050505050565b60055460009060ff1615610e255760405162461bcd60e51b8152602060048201526015602482015274115c9c9bdc8e881c99595b9d1c985b9d0818d85b1b605a1b6044820152606401610241565b6005805460ff191660011790556000546001600160a01b03848116911614610e5f5760405162461bcd60e51b815260040161024190611ce8565b60008251118015610e725750601e825111155b610ec85760405162461bcd60e51b815260206004820152602160248201527f696e76616c6964206964732073697a652c206d696e3a20312c206d61783a20336044820152600360fc1b6064820152608401610241565b6000610ed2611a58565b6000845167ffffffffffffffff811115610eee57610eee611be8565b604051908082528060200260200182016040528015610f17578160200160208202803683370190505b5090506000805b865181101561105b5760036000888381518110610f3d57610f3d611e0d565b6020908102919091018101518252818101929092526040908101600020815160c0810183528154815260018201546001600160a01b031693810193909352600281015491830182905260038101546060840152600481015460808401526005015460a08301529094501580610fbf575060208401516001600160a01b03163214155b80610fcd57508360a0015143105b611049576040840151610fe09086611d57565b9450611004878281518110610ff757610ff7611e0d565b6020026020010151611804565b86818151811061101657611016611e0d565b602002602001015183838061102a90611e54565b94508151811061103c5761103c611e0d565b6020026020010181815250505b8061105381611e54565b915050610f1e565b5083156111ec576040513260248201526044810185905260009081906001600160a01b038a169060640160408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b179052516110ba9190611d94565b6000604051808303816000865af19150503d80600081146110f7576040519150601f19603f3d011682016040523d82523d6000602084013e6110fc565b606091505b50915091508161110f5761043081611601565b60008367ffffffffffffffff81111561112a5761112a611be8565b604051908082528060200260200182016040528015611153578160200160208202803683370190505b50905060005b848110156111aa5785818151811061117357611173611e0d565b602002602001015182828151811061118d5761118d611e0d565b6020908102919091010152806111a281611e54565b915050611159565b507fe4b7499d334dcb3a4338114f8df473bb4444d9cace993f8d2eb779921f074dd38a3289846040516111e09493929190611edc565b60405180910390a15050505b50506005805460ff19169055509392505050565b6001600160a01b038116600090815260026020908152604080832080548251818502810185019093528083528493849392919083018282801561126257602002820191906000526020600020905b81548152602001906001019080831161124e575b5050505050905060005b8151811015610729576003600083838151811061128b5761128b611e0d565b60200260200101518152602001908152602001600020600501544310156112ba57826112b681611e54565b9350505b806112c481611e54565b91505061126c565b6112d4611a58565b50600090815260036020818152604092839020835160c0810185528154815260018201546001600160a01b0316928101929092526002810154938201939093529082015460608201526004820154608082015260059091015460a082015290565b6060600061134285611200565b9050600081116113645760405162461bcd60e51b815260040161024190611e81565b8084106113c75760405162461bcd60e51b815260206004820152602b60248201527f696e76616c6964205f73746172742c206d75737420626520696e205b302c206c60448201526a6f636b656449444e756d2960a81b6064820152608401610241565b6000831180156113d8575060648311155b6113f45760405162461bcd60e51b815260040161024190611eb0565b60008167ffffffffffffffff81111561140f5761140f611be8565b604051908082528060200260200182016040528015611438578160200160208202803683370190505b506001600160a01b0387166000908152600260209081526040808320805482518185028101850190935280835294955092938493919283018282801561149d57602002820191906000526020600020905b815481526020019060010190808311611489575b5050505050905060005b815181101561153e57600360008383815181106114c6576114c6611e0d565b602002602001015181526020019081526020016000206005015443101561152c578181815181106114f9576114f9611e0d565b602002602001015184848061150d90611e54565b95508151811061151f5761151f611e0d565b6020026020010181815250505b8061153681611e54565b9150506114a7565b50858461154b828a611d57565b1061155d5761155a8886611de3565b90505b60008167ffffffffffffffff81111561157857611578611be8565b6040519080825280602002602001820160405280156115a1578160200160208202803683370190505b50905060005b82811015610a0057856115ba8b83611d57565b815181106115ca576115ca611e0d565b60200260200101518282815181106115e4576115e4611e0d565b6020908102919091010152806115f981611e54565b9150506115a7565b8051606090156116145781518083602001fd5b505060408051808201909152600d81526c3ab735b737bbb71032b93937b960991b602082015290565b919050565b6000816000036116875760405162461bcd60e51b815260206004820152601060248201526f696e76616c6964206c6f636b2064617960801b6044820152606401610241565b6000611691611975565b61169b9084611df6565b6116a59043611d57565b905060006001600081546116b890611e54565b919050819055905060026000876001600160a01b03166001600160a01b031681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150556040518060c00160405280828152602001876001600160a01b0316815260200186815260200185815260200143815260200183815250600360008381526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301556080820151816004015560a08201518160050155905050600160026000886001600160a01b03166001600160a01b03168152602001908152602001600020805490506117ec9190611de3565b60008281526004602052604090205595945050505050565b6000818152600360205260409020600101546001600160a01b031632146118615760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081c9958dbdc99081a59607a1b6044820152606401610241565b3260009081526002602090815260408083208484526004909252909120548154829061188f90600190611de3565b8154811061189f5761189f611e0d565b90600052602060002001548282815481106118bc576118bc611e0d565b906000526020600020018190555080600460008484815481106118e1576118e1611e0d565b90600052602060002001548152602001908152602001600020819055508180548061190e5761190e611f19565b600082815260208082208301600019908101839055909201909255938152600380855260408083208381556001810180546001600160a01b031916905560028101849055918201839055600480830184905560059092018390559452928320929092555050565b60405160206024820152600b60448201526a626c6f636b5f737061636560a81b6064820152600090819081906110009060840160408051601f198184030181529181526020820180516001600160e01b03166304b01c2560e51b179052516119dd9190611d94565b600060405180830381855afa9150503d8060008114611a18576040519150601f19603f3d011682016040523d82523d6000602084013e611a1d565b606091505b509150915081611a305761043081611601565b80806020019051810190611a449190611f2f565b611a519062015180611d43565b9250505090565b6040518060c001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461163d57600080fd5b60008060008060008060c08789031215611ac757600080fd5b611ad087611a97565b9550611ade60208801611a97565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600081518084526020808501945080840160005b83811015611b3357815187529582019590820190600101611b17565b509495945050505050565b602081526000611b516020830184611b03565b9392505050565b600060208284031215611b6a57600080fd5b611b5182611a97565b600080600060608486031215611b8857600080fd5b611b9184611a97565b95602085013595506040909401359392505050565b60008060008060808587031215611bbc57600080fd5b611bc585611a97565b9350611bd360208601611a97565b93969395505050506040820135916060013590565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611c1157600080fd5b611c1a83611a97565b915060208084013567ffffffffffffffff80821115611c3857600080fd5b818601915086601f830112611c4c57600080fd5b813581811115611c5e57611c5e611be8565b8060051b604051601f19603f83011681018181108582111715611c8357611c83611be8565b604052918252848201925083810185019189831115611ca157600080fd5b938501935b82851015611cbf57843584529385019392850192611ca6565b8096505050505050509250929050565b600060208284031215611ce157600080fd5b5035919050565b602080825260159082015274696e76616c696420746f6b656e206164647265737360581b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082611d5257611d52611d17565b500490565b80820180821115611d6a57611d6a611d2d565b92915050565b60005b83811015611d8b578181015183820152602001611d73565b50506000910152565b60008251611da6818460208701611d70565b9190910192915050565b6020815260008251806020840152611dcf816040850160208701611d70565b601f01601f19169190910160400192915050565b81810381811115611d6a57611d6a611d2d565b8082028115828204841417611d6a57611d6a611d2d565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b600060018201611e6657611e66611d2d565b5060010190565b600082611e7c57611e7c611d17565b500690565b602080825260159082015274696e73756666696369656e74207175616e7469747960581b604082015260600190565b6020808252601290820152716d61782072657475726e203130302069647360701b604082015260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611f0f90830184611b03565b9695505050505050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215611f4157600080fd5b505191905056fea2646970667358221220f5cfa4f24962dbddd08f83d75803ce89ab4b63eaf817e01540180187e844de6064736f6c63430008110033";

    function lock(address _token, address _to, uint256 _amount, uint256 _lockDay) public returns (uint256) {
        bool success;
        bytes memory data;
        (success, data) = _token.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", msg.sender, address(this), _amount));
        if(!success) revert(getRevertMessage(data));

        address lockAddr = _getLock(_token);
        (success, data) = _token.call(abi.encodeWithSignature("approve(address,uint256)", lockAddr, _amount));
        if(!success) revert(getRevertMessage(data));

        (success, data) = lockAddr.call(abi.encodeWithSignature("lock(address,address,uint256,uint256)", _token, _to, _amount, _lockDay));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function batchLock(address _token, address _to, uint256 _amount, uint256 _times, uint256 _spaceDay, uint256 _startDay) public returns (uint256[] memory) {
        bool success;
        bytes memory data;
        (success, data) = _token.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", msg.sender, address(this), _amount));
        if(!success) revert(getRevertMessage(data));

        address lockAddr = _getLock(_token);
        (success, data) = _token.call(abi.encodeWithSignature("approve(address,uint256)", lockAddr, _amount));
        if(!success) revert(getRevertMessage(data));

        (success, data) = _getLock(_token).call(abi.encodeWithSignature("batchLock(address,address,uint256,uint256,uint256,uint256)", _token, _to, _amount, _times, _spaceDay, _startDay));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function withdrawByID(address _token, uint256[] memory _ids) public returns (uint256) {
        (bool success, bytes memory data) = _getLock(_token).call(abi.encodeWithSignature("withdrawByID(address,uint256[])", _token, _ids));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getTotalIDNum(address _token, address _addr) public view returns (uint256) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getTotalIDNum(address)", _addr));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getTotalIDs(address _token, address _addr, uint256 _start, uint256 _count) public view returns (uint256[] memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getTotalIDs(address,uint256,uint256)", _addr, _start, _count));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function getAvailableIDNum(address _token, address _addr) public view returns (uint256) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getAvailableIDNum(address)", _addr));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getAvailableIDs(address _token, address _addr, uint256 _start, uint256 _count) public view returns (uint256[] memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getAvailableIDs(address,uint256,uint256)", _addr, _start, _count));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function getLockedIDNum(address _token, address _addr) public view returns (uint256) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getLockedIDNum(address)", _addr));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256));
    }

    function getLockedIDs(address _token, address _addr, uint256 _start, uint256 _count) public view returns (uint256[] memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getLockedIDs(address,uint256,uint256)", _addr, _start, _count));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (uint256[]));
    }

    function getRecordByID(address _token, uint256 _id) public view returns (LockRecord memory) {
        (bool success, bytes memory data) = getLock(_token).staticcall(abi.encodeWithSignature("getRecordByID(uint256)", _id));
        if(!success) revert(getRevertMessage(data));
        return abi.decode(data, (LockRecord));
    }

    function getLock(address _token) public view returns (address) {
        return token2lock[_token];
    }

    function getToken(address _lock) public view returns (address) {
        return lock2token[_lock];
    }

    function _getLock(address _token) internal returns (address) {
        if(token2lock[_token] == address(0)) {
            address lockAddr;
            bytes memory code = abi.encodePacked(lockByteCode, abi.encode(_token));
            assembly {
                lockAddr := create(0, add(code, 0x20), mload(code))
            }
            require(lockAddr != address(0), "deploy token-lock-contract failed");
            token2lock[_token] = lockAddr;
            lock2token[lockAddr] = _token;
        }
        return token2lock[_token];
    }

    function getRevertMessage(bytes memory _data) internal pure returns (string memory) {
        if (_data.length > 0) {
            assembly {
                let size := mload(_data)
                revert(add(32, _data), size)
            }
        } else {
            return "unknown error";
        }
    }

    struct LockRecord {
        uint256 id;
        address addr;
        uint256 amount;
        uint256 lockDay;
        uint256 startHeight;
        uint256 unlockHeight;
    }
}